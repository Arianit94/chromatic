uniform vec4 uFreq0;
uniform vec4 uFreq1;
uniform vec4 uFreq2;
uniform vec4 uSoothingLight;
uniform vec4 uSoothingColor;
uniform vec4 uFolding;
uniform float uTime;
uniform float uEyeSharpness;
uniform float uEyeDepth;
uniform float uEyeCurveCoeff;
uniform float uPulsePosZ;
uniform float uBaseRadius;
uniform vec3 uCamPos;
uniform vec3 uCamFwdDir;
uniform vec3 uBaseColor;

varying vec4 vFreqData0;
varying vec4 vFreqData1;
varying vec4 vFreqData2;
varying vec3 vNormal;
varying vec3 vColor;
varying vec4 vLightData;
varying vec4 vSoothingLightData;
varying float vTime;
varying float vRingPulse;

//#pragma glslify: snoise = require(./func/snoise.glsl)
#pragma glslify: cubicPulse = require(./func/cubicPulse.glsl)


void main() {

  float dotFwd = dot(uCamFwdDir,normal)*0.5+0.5;

  //float noise = snoise(vec4(normal*1.0, uTime*0.0003));
  vec3 pos = position * uBaseRadius;
  pos += uCamFwdDir * pow(dotFwd,uEyeCurveCoeff) * uEyeDepth;// uTime *5.0;

  // wiggle
  pos += normal * sin(uTime*uFolding.z + pos.y*uFolding.x) * uFolding.y;


  float fallOff = pow(dotFwd, uEyeSharpness);
  //float fallOff = smoothstep(0.7, 1.0, dotFwd);
  float freq0 = (sin( position.z* uFreq0.x + uTime*uFreq0.y)*0.5+0.5) * fallOff;
  float freq1 = (cos( position.z*uFreq1.x + uTime*uFreq1.y)*0.5+0.5) * fallOff;
  float freq2 = (sin( pos.z*uFreq2.x + uTime*uFreq2.y)*0.5+0.5) * fallOff;

  float ringPulse = cubicPulse(uPulsePosZ, 2.0, pos.z);

  // soothing light
  float soothingFreq = uSoothingLight.x;
  float soothingTime = uSoothingLight.z;
  float soothingZFreq = uSoothingLight.w;
  float soothingLight = clamp(sin(pos.z*soothingFreq + soothingTime), 0.0, 1.0);

  vSoothingLightData = vec4((sin(vec3(normal.xyz *5000.0 + vec3(normal.z* soothingZFreq + uTime*6.0)))*0.5+0.5)*0.03+uSoothingColor.xyz, soothingLight);
  //vSoothingLightData = vec4(vec3(0.5, 0.5, 1.0)*0.6, soothingLight);
  vLightData = vec4(freq0, freq1, freq2, fallOff);
  vFreqData0 = uFreq0;
  vFreqData1 = uFreq1;
  vFreqData2 = uFreq2;

  vRingPulse = ringPulse;
  vTime = uTime;
  vNormal = normal;
  vColor = uBaseColor;
  gl_Position = projectionMatrix * modelViewMatrix * vec4( pos, 1.0 );
}
