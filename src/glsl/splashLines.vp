//varying vec2 vUv;

varying vec3 vNormal;
varying vec4 vColor;

uniform float uTime;
uniform float uFadeCoeff;
#pragma glslify: cubicPulse = require(./func/cubicPulse.glsl)

void main() {

	vNormal = normal;

	float r = mix( 0.1, 0.8, cos(uTime*1.0 + (uv.x+uv.y)*7.0)*0.5+0.5);
	float g = mix( 0.3, 0.6, sin(uTime*2.0 + uv.x*5.0)*0.5+0.5);
	float b = mix( 0.5, 1.0, cos(-uTime*2.0 + (uv.x-uv.y)*6.0)*0.5+0.5);
	vec3 color = vec3(r,g,b);
	float alpha = pow(1.0-uFadeCoeff,1.5);

	vColor.xyz = color;
	vColor.w = alpha;

	//vColor.xyz = vec3(uv, 0.0);
	float yNorm = uv.y *2.0 - 1.0;

	vec3 pos = position;

	float waveCoeff = sin(uTime + 20.0*position.x)*0.5+0.5;

	float pulseCenter = 0.5;
	float pulseWidth = 1.0-uFadeCoeff;
	float pulse = cubicPulse(pulseCenter, pulseWidth, uv.x);
	pos.y *= mix(0.9, 1.0, waveCoeff);
	pos.y *= mix(1.0, pulse, uFadeCoeff);
	pos.z += mix(0.0, sin(uTime*2.0 + 100.0*position.x+90.0*position.y)*0.5 *pow(pulse,20.0), uFadeCoeff);

	pos.xy = mix(pos.xy, vec2(0.0), pow(uFadeCoeff, 1.5 + sin(uTime*3.0 + position.x*300.0 + position.y*2555.0)));

    //vUv = uv;
    gl_PointSize = mix(3.0, 6.0, waveCoeff);
    gl_Position = projectionMatrix * modelViewMatrix * vec4( pos, 1.0 );
}